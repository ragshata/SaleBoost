# - *- coding: utf- 8 - *-
from typing import Union

from aiogram import Bot

from tgbot.database.db_category import Categoryx
from tgbot.database.db_item import Itemx
from tgbot.database.db_position import Positionx
from tgbot.database.db_purchases import Purchasesx, PurchasesModel
from tgbot.database.db_purchases_clients import Purchasesclientx
from tgbot.database.db_refill import Refillx, RefillModel
from tgbot.database.db_settings import Settingsx
from tgbot.database.db_users import ClientModel, Clientx, Userx, UserModel
from tgbot.keyboards.inline_admin import profile_search_finl, profile_search_finl_client
from tgbot.keyboards.inline_admin_prod import (
    position_edit_open_finl,
    category_edit_open_finl,
    item_delete_finl,
    user_position_edit_open_finl,
)
from tgbot.keyboards.inline_user import (
    client_profile_finl,
    products_open_finl,
    user_profile_finl,
)
from tgbot.utils.const_functions import ded, get_unix, convert_day, convert_date
from tgbot.utils.misc.bot_models import ARS


################################################################################
################################# –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ #################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def open_profile_user(bot: Bot, user_id: Union[int, str]):
    get_purchases = Purchasesx.gets(user_id=user_id)
    get_user = Userx.get(user_id=user_id)

    how_days = int(get_unix() - get_user.user_unix) // 60 // 60 // 24

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rating = (
        round(get_user.user_rating_avg, 2) if get_user.user_rating_avg else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    )

    send_text = ded(
        f"""
        <b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        üÜî <code>{get_user.user_rlname}</code> <code>{get_user.user_surname}</code>
        üí∞ –ë–∞–ª–∞–Ω—Å: <code>{get_user.user_balance}‚ÇΩ</code>
        ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <code>{user_rating}</code>

        üï∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{convert_date(get_user.user_unix, False, False)} ({convert_day(how_days)})</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=user_profile_finl(),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–æ–º
async def open_profile_client(bot: Bot, user_id: Union[int, str]):
    get_purchases = Purchasesclientx.gets(client_id=user_id)
    get_client = Clientx.get(client_id=user_id)

    how_days = int(get_unix() - get_client.client_unix) // 60 // 60 // 24
    #!count_items = sum([purchase.purchase_count for purchase in get_purchases])
    #!üßëüèª‚Äçüíª –î–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: <code>{count_items}—à—Ç</code>
    send_text = ded(
        f"""
        <b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        üÜî <code>{get_client.client_rlname}</code> <code>{get_client.client_surname}</code>
        üí∞ –ë–∞–ª–∞–Ω—Å: <code>{get_client.client_balance}‚ÇΩ</code>

        üï∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{convert_date(get_client.client_unix, False, False)} ({convert_day(how_days)})</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=client_profile_finl(),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def position_open_user(
    bot: Bot, user_id: int, position_id: Union[str, int], position_unix
):
    get_items = Itemx.gets(position_id=position_id)
    get_position = Positionx.get(position_unix=position_unix)
    get_category = Categoryx.get(category_id=get_position.category_id)

    if get_position.position_desc != "None":
        text_desc = f"\n‚ñ™Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: {get_position.position_desc}"
    else:
        text_desc = ""

    send_text = ded(
        f"""
        <b>üßëüèª‚Äçüíª –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position.position_name}</code>
        ‚ñ™Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category.category_name}</code>
        ‚ñ™Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: <code>{get_position.position_time}—á</code>
        ‚ñ™Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position.position_price}‚ÇΩ</code>
        {text_desc}
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=products_open_finl(
            position_id, get_position.category_id, get_position.position_unix
        ),
    )


################################################################################
#################################### –ê–î–ú–ò–ù #####################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–æ–º
async def open_profile_admin(bot: Bot, user_id: int, get_user: UserModel):
    get_purchases = Purchasesx.gets(user_id=get_user.user_id)

    how_days = int(get_unix() - get_user.user_unix) // 60 // 60 // 24
    #!count_items = sum([purchase.purchase_count for purchase in get_purchases])
    #!‚ñ™Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: <code>{count_items}—à—Ç</code>

    send_text = ded(
        f"""
        <b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a></b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è ID: <code>{get_user.user_id}</code>
        ‚ñ™Ô∏è –õ–æ–≥–∏–Ω: <b>@{get_user.user_login}</b>
        ‚ñ™Ô∏è –ò–º—è: <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>
        ‚ñ™Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{convert_date(get_user.user_unix, False, False)} ({convert_day(how_days)})</code>

        ‚ñ™Ô∏è –ë–∞–ª–∞–Ω—Å: <code>{get_user.user_balance}‚ÇΩ</code>
        ‚ñ™Ô∏è –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: <code>{get_user.user_give}‚ÇΩ</code>
        ‚ñ™Ô∏è –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: <code>{get_user.user_refill}‚ÇΩ</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=profile_search_finl(get_user.user_id),
    )


async def open_profile_admin_client(bot: Bot, user_id: int, get_user: ClientModel):
    get_purchases = Purchasesclientx.gets(client_id=get_user.client_id)

    how_days = int(get_unix() - get_user.client_unix) // 60 // 60 // 24
    #!count_items = sum([purchase.purchase_count for purchase in get_purchases])
    #!‚ñ™Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: <code>{count_items}—à—Ç</code>

    send_text = ded(
        f"""
        <b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <a href='tg://user?id={get_user.client_id}'>{get_user.client_name}</a></b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è ID: <code>{get_user.client_id}</code>
        ‚ñ™Ô∏è –õ–æ–≥–∏–Ω: <b>@{get_user.client_login}</b>
        ‚ñ™Ô∏è –ò–º—è: <a href='tg://user?id={get_user.client_id}'>{get_user.client_name}</a>
        ‚ñ™Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{convert_date(get_user.client_unix, False, False)} ({convert_day(how_days)})</code>

        ‚ñ™Ô∏è –ë–∞–ª–∞–Ω—Å: <code>{get_user.client_balance}‚ÇΩ</code>
        ‚ñ™Ô∏è –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: <code>{get_user.client_give}‚ÇΩ</code>
        ‚ñ™Ô∏è –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: <code>{get_user.client_refill}‚ÇΩ</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=profile_search_finl_client(get_user.client_id),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
async def refill_open_admin(bot: Bot, user_id: int, get_refill: RefillModel):
    get_user = Userx.get(user_id=get_refill.user_id)

    if get_refill.refill_method == "Yoomoney":
        pay_way = "–Ækassa üîÆ"
    else:
        pay_way = f"{get_refill.refill_method}"

    send_text = ded(
        f"""
        <b>üßæ –ß–µ–∫: <code>#{get_refill.refill_receipt}</code></b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a> | <code>{get_user.user_id}</code>
        ‚ñ™Ô∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_refill.refill_amount}‚ÇΩ</code>
        ‚ñ™Ô∏è –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{pay_way}</code>
        ‚ñ™Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{get_refill.refill_comment}</code>
        ‚ñ™Ô∏è –î–∞—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{convert_date(get_refill.refill_unix)}</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
async def refill_open_admin_client(bot: Bot, user_id: int, get_refill: RefillModel):
    get_user = Clientx.get(user_id=get_refill.user_id)

    if get_refill.refill_method == "Yoomoney":
        pay_way = "–Ækassa üîÆ"
    else:
        pay_way = f"{get_refill.refill_method}"

    send_text = ded(
        f"""
        <b>üßæ –ß–µ–∫: <code>#{get_refill.refill_receipt}</code></b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user.client_id}'>{get_user.client_name}</a> | <code>{get_user.client_id}</code>
        ‚ñ™Ô∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_refill.refill_amount}‚ÇΩ</code>
        ‚ñ™Ô∏è –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{pay_way}</code>
        ‚ñ™Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{get_refill.refill_comment}</code>
        ‚ñ™Ô∏è –î–∞—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{convert_date(get_refill.refill_unix)}</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ó–∞–∫–∞–∑—ã –∞–¥–º–∏–Ω–æ–º
async def purchase_open_admin(
    bot: Bot, arSession: ARS, user_id: int, get_purchase: PurchasesModel
):
    from tgbot.utils.misc_functions import upload_text

    get_user = Userx.get(user_id=get_purchase.user_id)

    link_items = await upload_text(arSession, get_purchase.purchase_data)

    # ‚ñ™Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: <code>{get_purchase.purchase_count}—à—Ç</code>

    send_text = ded(
        f"""
        <b>üßæ –ß–µ–∫: <code>#{get_purchase.purchase_receipt}</code></b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a> | <code>{get_user.user_id}</code>
        ‚ñ™Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: <code>{get_purchase.purchase_position_name}</code>
        ‚ñ™Ô∏è –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: <code>{get_purchase.purchase_price_one}‚ÇΩ</code>
        ‚ñ™Ô∏è –ë–∞–ª–∞–Ω—Å –¥–æ –ó–∞–∫–∞–∑—ã: <code>{get_purchase.user_balance_before}‚ÇΩ</code>
        ‚ñ™Ô∏è –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ó–∞–∫–∞–∑—ã: <code>{get_purchase.user_balance_after}‚ÇΩ</code>
        ‚ñ™Ô∏è –î–∞—Ç–∞ –ó–∞–∫–∞–∑—ã: <code>{convert_date(get_purchase.purchase_unix)}</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ó–∞–∫–∞–∑—ã –∞–¥–º–∏–Ω–æ–º
async def purchase_open_admin(
    bot: Bot, arSession: ARS, user_id: int, get_purchase: PurchasesModel
):
    from tgbot.utils.misc_functions import upload_text

    get_user = Userx.get(user_id=get_purchase.user_id)

    link_items = await upload_text(arSession, get_purchase.purchase_data)

    # ‚ñ™Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: <code>{get_purchase.purchase_count}—à—Ç</code>

    send_text = ded(
        f"""
        <b>üßæ –ß–µ–∫: <code>#{get_purchase.purchase_receipt}</code></b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a> | <code>{get_user.user_id}</code>
        ‚ñ™Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: <code>{get_purchase.purchase_position_name}</code>
        ‚ñ™Ô∏è –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: <code>{get_purchase.purchase_price_one}‚ÇΩ</code>
        ‚ñ™Ô∏è –ë–∞–ª–∞–Ω—Å –¥–æ –ó–∞–∫–∞–∑—ã: <code>{get_purchase.user_balance_before}‚ÇΩ</code>
        ‚ñ™Ô∏è –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ó–∞–∫–∞–∑—ã: <code>{get_purchase.user_balance_after}‚ÇΩ</code>
        ‚ñ™Ô∏è –î–∞—Ç–∞ –ó–∞–∫–∞–∑—ã: <code>{convert_date(get_purchase.purchase_unix)}</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–¥–º–∏–Ω–æ–º
async def category_open_admin(
    bot: Bot, user_id: int, category_id: Union[str, int], remover: int
):
    get_category = Categoryx.get(category_id=category_id)
    get_positions = Positionx.gets(category_id=category_id)

    send_text = ded(
        f"""
        <b>üóÉÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{get_category.category_name}</code>
        ‚ñ™Ô∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <code>{convert_date(get_category.category_unix)}</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=category_edit_open_finl(category_id, remover),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–º
async def position_open_admin(
    bot: Bot, user_id: int, position_id: Union[str, int], position_unix
):
    get_items = Itemx.gets(position_id=position_id)
    get_position = Positionx.get(position_unix=position_unix)
    get_category = Categoryx.get(category_id=get_position.category_id)

    get_purchases = Purchasesx.gets(purchase_position_id=position_id)
    get_settings = Settingsx.get()

    profit_amount_all, profit_amount_day, profit_amount_week, profit_amount_month = (
        0,
        0,
        0,
        0,
    )
    profit_count_all, profit_count_day, profit_count_week, profit_count_month = (
        0,
        0,
        0,
        0,
    )

    position_desc = "<code>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</code>"

    if get_position.position_desc != "None":
        position_desc = f"{get_position.position_desc}"

    for purchase in get_purchases:
        profit_amount_all += purchase.purchase_price

        if purchase.purchase_unix - get_settings.misc_profit_day >= 0:
            profit_amount_day += purchase.purchase_price
        if purchase.purchase_unix - get_settings.misc_profit_week >= 0:
            profit_amount_week += purchase.purchase_price
        if purchase.purchase_unix - get_settings.misc_profit_month >= 0:
            profit_amount_month += purchase.purchase_price

    send_text = ded(
        f"""
        <b>üìÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{get_position.position_name}</code>
        ‚ñ™Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category.category_name}</code>
        ‚ñ™Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position.position_price}‚ÇΩ</code>
        ‚ñ™Ô∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <code>{convert_date(get_category.category_unix)}</code>
        ‚ñ™Ô∏è –°—Ä–æ–∫: {get_position.position_time} —á–∞—Å–æ–≤
        ‚ñ™Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: {position_desc}
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=position_edit_open_finl(position_id, get_position.category_id, 0, position_unix),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ userom
async def position_open_not_admin_user(
    bot: Bot, user_id: int, position_id: Union[str, int], position_unix
):
    get_items = Itemx.gets(position_id=position_id)
    get_position = Positionx.get(position_unix=position_unix)
    get_category = Categoryx.get(category_id=get_position.category_id)

    get_purchases = Purchasesx.gets(purchase_position_id=position_id)
    get_settings = Settingsx.get()

    profit_amount_all, profit_amount_day, profit_amount_week, profit_amount_month = (
        0,
        0,
        0,
        0,
    )
    profit_count_all, profit_count_day, profit_count_week, profit_count_month = (
        0,
        0,
        0,
        0,
    )

    position_desc = "<code>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</code>"

    if get_position.position_desc != "None":
        position_desc = f"{get_position.position_desc}"

    for purchase in get_purchases:
        profit_amount_all += purchase.purchase_price

        if purchase.purchase_unix - get_settings.misc_profit_day >= 0:
            profit_amount_day += purchase.purchase_price
        if purchase.purchase_unix - get_settings.misc_profit_week >= 0:
            profit_amount_week += purchase.purchase_price
        if purchase.purchase_unix - get_settings.misc_profit_month >= 0:
            profit_amount_month += purchase.purchase_price

    send_text = ded(
        f"""
        <b>üìÅ –ó–∞–∫–∞–∑</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{get_position.position_name}</code>
        ‚ñ™Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category.category_name}</code>
        ‚ñ™Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position.position_price}‚ÇΩ</code>
        ‚ñ™Ô∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <code>{convert_date(get_category.category_unix)}</code>
        ‚ñ™Ô∏è –°—Ä–æ–∫: {get_position.position_time} —á–∞—Å–æ–≤
        ‚ñ™Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: {position_desc}
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=user_position_edit_open_finl(
            position_id, get_position.category_id, 0, get_position.position_unix
        ),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–æ–º
async def item_open_admin(
    bot: Bot, user_id: int, item_id: Union[str, int], remover: int
):
    get_item = Itemx.get(item_id=item_id)

    get_position = Positionx.get(position_id=get_item.position_id)
    get_category = Categoryx.get(category_id=get_item.category_id)

    send_text = ded(
        f"""
        <b>üßëüèª‚ÄçüíªÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category.category_name}</code>
        ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{get_position.position_name}</code>
        ‚ñ™Ô∏è –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: <code>{convert_date(get_item.item_unix)}</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=item_delete_finl(
            get_item.item_id, get_item.position_id, get_item.category_id
        ),
    )


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
def get_statistics() -> str:
    refill_amount_all, refill_amount_day, refill_amount_week, refill_amount_month = (
        0,
        0,
        0,
        0,
    )
    refill_count_all, refill_count_day, refill_count_week, refill_count_month = (
        0,
        0,
        0,
        0,
    )
    profit_amount_all, profit_amount_day, profit_amount_week, profit_amount_month = (
        0,
        0,
        0,
        0,
    )
    profit_count_all, profit_count_day, profit_count_week, profit_count_month = (
        0,
        0,
        0,
        0,
    )
    (
        users_all,
        users_day,
        users_week,
        users_month,
        users_money_have,
        users_money_give,
    ) = (0, 0, 0, 0, 0, 0)

    get_categories = Categoryx.get_all()
    get_positions = Positionx.get_all()
    get_purchases = Purchasesx.get_all()
    get_refill = Refillx.get_all()
    get_items = Itemx.get_all()
    get_users = Userx.get_all()

    get_settings = Settingsx.get()

    for purchase in get_purchases:
        profit_amount_all += purchase.purchase_price

        if purchase.purchase_unix - get_settings.misc_profit_day >= 0:
            profit_amount_day += purchase.purchase_price
        if purchase.purchase_unix - get_settings.misc_profit_week >= 0:
            profit_amount_week += purchase.purchase_price
        if purchase.purchase_unix - get_settings.misc_profit_month >= 0:
            profit_amount_month += purchase.purchase_price

    for refill in get_refill:
        refill_amount_all += refill.refill_amount
        refill_count_all += 1

        if refill.refill_unix - get_settings.misc_profit_day >= 0:
            refill_amount_day += refill.refill_amount
            refill_count_day += 1
        if refill.refill_unix - get_settings.misc_profit_week >= 0:
            refill_amount_week += refill.refill_amount
            refill_count_week += 1
        if refill.refill_unix - get_settings.misc_profit_month >= 0:
            refill_amount_month += refill.refill_amount
            refill_count_month += 1

    for user in get_users:
        users_money_have += user.user_balance
        users_money_give += user.user_give
        users_all += 1

        if user.user_unix - get_settings.misc_profit_day >= 0:
            users_day += 1
        if user.user_unix - get_settings.misc_profit_week >= 0:
            users_week += 1
        if user.user_unix - get_settings.misc_profit_month >= 0:
            users_month += 1

    return ded(
        f"""
        <b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        <b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>
        ‚î£ –Æ–∑–µ—Ä–æ–≤ –∑–∞ –î–µ–Ω—å: <code>{users_day}</code>
        ‚î£ –Æ–∑–µ—Ä–æ–≤ –∑–∞ –ù–µ–¥–µ–ª—é: <code>{users_week}</code>
        ‚î£ –Æ–∑–µ—Ä–æ–≤ –∑–∞ –ú–µ—Å—è—Ü: <code>{users_month}</code>
        ‚îó –Æ–∑–µ—Ä–æ–≤ –∑–∞ –í—Å—ë –≤—Ä–µ–º—è: <code>{users_all}</code>

        <b>üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞</b>
        ‚î£‚Äí –ó–∞–∫–∞–∑—ã (–∫–æ–ª-–≤–æ, —Å—É–º–º–∞)
        ‚î£ –ó–∞ –î–µ–Ω—å: <code>{profit_count_day}—à—Ç</code> - <code>{profit_amount_day}‚ÇΩ</code>
        ‚î£ –ó–∞ –ù–µ–¥–µ–ª—é: <code>{profit_count_week}—à—Ç</code> - <code>{profit_amount_week}‚ÇΩ</code>
        ‚î£ –ó–∞ –ú–µ—Å—è—Ü: <code>{profit_count_month}—à—Ç</code> - <code>{profit_amount_month}‚ÇΩ</code>
        ‚î£ –ó–∞ –í—Å—ë –≤—Ä–µ–º—è: <code>{profit_count_all}—à—Ç</code> - <code>{profit_amount_all}‚ÇΩ</code>
        ‚îÉ
        ‚î£‚Äí –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ–ª-–≤–æ, —Å—É–º–º–∞)
        ‚î£ –ó–∞ –î–µ–Ω—å: <code>{refill_count_day}—à—Ç</code> - <code>{refill_amount_day}‚ÇΩ</code>
        ‚î£ –ó–∞ –ù–µ–¥–µ–ª—é: <code>{refill_count_week}—à—Ç</code> - <code>{refill_amount_week}‚ÇΩ</code>
        ‚î£ –ó–∞ –ú–µ—Å—è—Ü: <code>{refill_count_month}—à—Ç</code> - <code>{refill_amount_month}‚ÇΩ</code>
        ‚î£ –ó–∞ –í—Å—ë –≤—Ä–µ–º—è: <code>{refill_count_all}—à—Ç</code> - <code>{refill_amount_all}‚ÇΩ</code>
        ‚îÉ
        ‚î£‚Äí –ü—Ä–æ—á–µ–µ
        ‚î£ –°—Ä–µ–¥—Å—Ç–≤ –≤—ã–¥–∞–Ω–æ: <code>{users_money_give}‚ÇΩ</code>
        ‚îó –°—Ä–µ–¥—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: <code>{users_money_have}‚ÇΩ</code>

        <b>üßëüèª‚Äçüíª –ó–∞–∫–∞–∑—ã</b>
        ‚î£ –ü–æ–∑–∏—Ü–∏–π: <code>{len(get_positions)}—à—Ç</code>
        ‚îó –ö–∞—Ç–µ–≥–æ—Ä–∏–π: <code>{len(get_categories)}—à—Ç</code>
   """
    )
