# - *- coding: utf- 8 - *-
import os

import aiofiles
from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.utils.media_group import MediaGroupBuilder

from tgbot.data.config import PATH_LOGS, PATH_DATABASE
from tgbot.database.db_users import Clientx, Userx
from tgbot.keyboards.reply_main import (
    payments_frep,
    settings_frep,
    functions_frep,
    items_frep,
)
from tgbot.utils.const_functions import get_date
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import get_statistics

router = Router(name=__name__)


# –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
@router.message(F.text == "üîë –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã")
async def admin_payments(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b>üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã.</b>",
        reply_markup=payments_frep(),
    )


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b>‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.</b>",
        reply_markup=settings_frep(),
    )


# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@router.message(F.text == "üîÜ –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
async def admin_functions(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b>üîÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>",
        reply_markup=functions_frep(),
    )


from tgbot.utils.const_functions import ikb
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@router.message(F.text == "üóÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def admin_functions(message: Message, bot: Bot, state: FSM, arSession: ARS):
    keyboard = InlineKeyboardBuilder()

    keyboard.row(ikb("üßëüèª‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", data="find_all_user")).row(
        ikb("üí∞ –ö–ª–∏–µ–Ω—Ç", data="find_all_client")
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard.as_markup()
    )


from aiogram.types import CallbackQuery


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
@router.callback_query(F.data.in_({"find_all_user", "find_all_client"}))
async def show_user_list(callback: CallbackQuery, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
    if callback.data == "find_all_user":
        users = Userx.get_all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_type = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    elif callback.data == "find_all_client":
        users = Clientx.get_all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        user_type = "–∫–ª–∏–µ–Ω—Ç–æ–≤"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    if not users:
        text = f"–°–ø–∏—Å–æ–∫ {user_type} –ø—É—Å—Ç."
    else:
        text = f"–°–ø–∏—Å–æ–∫ {user_type}:\n\n"
        for user in users:
            text += (
                f"ID: {user.user_id if hasattr(user, 'user_id') else user.client_id}\n"
                f"–õ–æ–≥–∏–Ω: {user.user_login if hasattr(user, 'user_login') else user.client_login}\n"
                f"–ò–º—è: {user.user_name if hasattr(user, 'user_name') else user.client_name}\n"
                f"–ë–∞–ª–∞–Ω—Å: {user.user_balance if hasattr(user, 'user_balance') else user.client_balance} —Ä—É–±.\n"
                f"–ù–æ–º–µ—Ä: {user.user_number if hasattr(user, 'user_number') else user.client_number}\n"
                f"----------------------\n"
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await callback.message.edit_text(text)


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
@router.message(F.text == "üßëüèª‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
async def admin_products(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b>üßëüèª‚Äçüíª –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π.</b>",
        reply_markup=items_frep(),
    )


# C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_statistics(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(get_statistics())


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–î
@router.message(Command(commands=["db", "database"]))
async def admin_database(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer_document(
        FSInputFile(PATH_DATABASE),
        caption=f"<b>üì¶ #BACKUP | <code>{get_date(full=False)}</code></b>",
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –õ–æ–≥–æ–≤
@router.message(Command(commands=["log", "logs"]))
async def admin_log(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    media_group = MediaGroupBuilder(
        caption=f"<b>üñ® #LOGS | <code>{get_date(full=False)}</code></b>",
    )

    if os.path.isfile(PATH_LOGS):
        media_group.add_document(media=FSInputFile(PATH_LOGS))

    if os.path.isfile("tgbot/data/sv_log_err.log"):
        media_group.add_document(media=FSInputFile("tgbot/data/sv_log_err.log"))

    if os.path.isfile("tgbot/data/sv_log_out.log"):
        media_group.add_document(media=FSInputFile("tgbot/data/sv_log_out.log"))

    await message.answer_media_group(media=media_group.build())


# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
@router.message(
    Command(commands=["clear_log", "clear_logs", "log_clear", "logs_clear"])
)
async def admin_log_clear(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    if os.path.isfile(PATH_LOGS):
        async with aiofiles.open(PATH_LOGS, "w") as file:
            await file.write(f"{get_date()} | LOGS WAS CLEAR")

    if os.path.isfile("tgbot/data/sv_log_err.log"):
        async with aiofiles.open("tgbot/data/sv_log_err.log", "w") as file:
            await file.write(f"{get_date()} | LOGS ERR WAS CLEAR")

    if os.path.isfile("tgbot/data/sv_log_out.log"):
        async with aiofiles.open("tgbot/data/sv_log_out.log", "w") as file:
            await file.write(f"{get_date()} | LOGS OUT WAS CLEAR")

    await message.answer("<b>üñ® –õ–æ–≥–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã</b>")
