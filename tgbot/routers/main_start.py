# - *- coding: utf- 8 - *-
from aiogram import Router, Bot, F, types
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.filters.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from tgbot.database.db_users import Clientx, Userx
from tgbot.database.db_settings import Settingsx
from tgbot.database.db_users import UserModel
from tgbot.keyboards.inline_user import user_support_finl
from tgbot.keyboards.reply_main import menu_frep, menu_second_start, menu_second_start_clients
from tgbot.utils.const_functions import ded
from tgbot.utils.misc.bot_filters import IsBuy, IsRefill, IsWork
from tgbot.utils.misc.bot_models import FSM, ARS

# –ò–≥–Ω–æ—Ä-–∫–æ–ª–±—ç–∫–∏ –ø–æ–∫—É–ø–æ–∫
prohibit_buy = [
    "buy_category_swipe",
    "buy_category_open",
    "buy_position_swipe",
    "buy_position_open",
    "buy_item_open",
    "buy_item_confirm",
]

# –ò–≥–Ω–æ—Ä-–∫–æ–ª–±—ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
prohibit_refill = [
    "user_refill",
    "user_refill_method",
    "Pay:",
    "Pay:Yoomoney",
]

router = Router(name=__name__)


################################################################################
########################### –°–¢–ê–¢–£–° –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –†–ê–ë–û–¢ ###########################
# –§–∏–ª—å—Ç—Ä –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã - —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(IsWork())
async def filter_work_message(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_settings = Settingsx.get()

    if get_settings.misc_support != "None":
        return await message.answer(
            "<b>‚õî –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>",
            reply_markup=user_support_finl(get_settings.misc_support),
        )

    await message.answer("<b>‚õî –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>")


# –§–∏–ª—å—Ç—Ä –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã - –∫–æ–ª–±—ç–∫
@router.callback_query(IsWork())
async def filter_work_callback(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()

    await call.answer("‚õî –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.", True)


################################################################################
################################# –°–¢–ê–¢–£–° –ü–û–ö–£–ü–û–ö ###############################
# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ - —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(IsBuy(), F.text == "üßëüèª‚Äçüíª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
@router.message(IsBuy(), StateFilter("here_item_count"))
async def filter_buy_message(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer("<b>‚õî Orders –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.</b>")


# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ - –∫–æ–ª–±—ç–∫
@router.callback_query(IsBuy(), F.text.startswith(prohibit_buy))
async def filter_buy_callback(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()

    await call.answer("‚õî Orders –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.", True)


################################################################################
############################### –°–¢–ê–¢–£–° –ü–û–ü–û–õ–ù–ï–ù–ò–ô ##############################
# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(IsRefill(), StateFilter("here_pay_amount"))
async def filter_refill_message(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer("<b>‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.</b>")


# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - –∫–æ–ª–±—ç–∫
@router.callback_query(IsRefill(), F.text.startswith(prohibit_refill))
async def filter_refill_callback(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()

    await call.answer("‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.", True)


################################################################################
#################################### –ü–†–û–ß–ï–ï ####################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text.in_(("üîô Main menu", "/start")))
async def main_start(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        ded(
            """
            üöÄ Bee ‚Äî Your assistant in the world of freelancing! üöÄ

            Welcome! This bot will help you:

            ‚û°Ô∏è Quickly find performers for your projects.
            ‚û°Ô∏è Easily start earning money by offering your services.

            What do you want to do?

            1Ô∏è‚É£ Become a performer: Registration and start working in just a few steps!

            2Ô∏è‚É£ Find a performer: Find the perfect specialist for your task.

        """
        ),
        reply_markup=menu_frep(message.from_user.id),
    )

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class RegisterStates(StatesGroup):
    user_rlname = State()
    user_surname = State()
    user_number = State()


@router.message(F.text.in_(("üßëüèª‚Äçüíª I am a performer")))
async def enter_registr(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = Userx.get(user_id=message.from_user.id)
    if user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user.user_number == 0:  # –ï—Å–ª–∏ –∏–º—è –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await message.answer(
                "üìùIt looks like you are not registered yet. Enter your name:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.set_state(RegisterStates.user_rlname)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.user_rlname}!",
                reply_markup=menu_second_start(message.from_user.id)
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(RegisterStates.user_rlname)


@router.message(RegisterStates.user_rlname)
async def set_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(user_rlname=message.text)

    await message.answer(
        "üìù Enter your last name:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(RegisterStates.user_surname)


@router.message(RegisterStates.user_surname)
async def set_surname(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é
    await state.update_data(user_surname=message.text)

    await message.answer(
        "üìù Enter your phone number:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(RegisterStates.user_number)


@router.message(RegisterStates.user_number)
async def set_phone(message: Message, state: FSMContext):
    phone = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.startswith("+") or not phone[1:].isdigit():
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +123456789:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await state.update_data(user_number=phone)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    user_rlname = data["user_rlname"]
    user_surname = data["user_surname"]
    user_number = data["user_number"]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    Userx.update(
        user_id=message.from_user.id,
        user_login=message.from_user.username or "unknown",
        user_name=message.from_user.first_name or "unknown",
        user_rlname=user_rlname,
        user_surname=user_surname,
        user_number=user_number,
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
    await message.answer(
        ded(
            f"""
            ‚úÖ Registration completed!
            Your name: {user_rlname}
            Your last name: {user_surname}
            Your phone number: {user_number}
            """
        ),
        reply_markup=menu_second_start(message.from_user.id),
    )

class RegisterStatesClients(StatesGroup):
    client_rlname = State()
    client_surname = State()
    client_number = State()


@router.message(F.text.in_(("üîé I am the customer")))
async def enter_registr(message: Message, state: FSMContext):
    client = Clientx.get(client_id=message.from_user.id)
    if client:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if client.client_number == 0:  # –ï—Å–ª–∏ –∏–º—è –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await message.answer(
                "üìùIt looks like you are not registered yet. Enter your name:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.set_state(RegisterStatesClients.client_rlname)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {client.client_rlname}!",
                reply_markup=menu_second_start_clients(message.from_user.id)
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(RegisterStatesClients.client_rlname)


@router.message(RegisterStatesClients.client_rlname)
async def set_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(client_rlname=message.text)

    await message.answer(
        "üìù Enter your last name:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(RegisterStatesClients.client_surname)


@router.message(RegisterStatesClients.client_surname)
async def set_surname(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é
    await state.update_data(client_surname=message.text)

    await message.answer(
        "üìù Enter your phone number:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(RegisterStatesClients.client_number)


@router.message(RegisterStatesClients.client_number)
async def set_phone(message: Message, state: FSMContext):
    phone = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.startswith("+") or not phone[1:].isdigit():
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +123456789:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await state.update_data(client_number=phone)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    client_rlname = data["client_rlname"]
    client_surname = data["client_surname"]
    client_number = data["client_number"]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    Clientx.update(
        client_id=message.from_user.id,
        client_login=message.from_user.username or "unknown",
        client_name=message.from_user.first_name or "unknown",
        client_rlname=client_rlname,
        client_surname=client_surname,
        client_number=client_number,
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
    await message.answer(
        ded(
            f"""
            ‚úÖ Registration completed!
            Your name: {client_rlname}
            Your last name: {client_surname}
            Your phone number: {client_number}
            """
        ),reply_markup=menu_second_start_clients(message.from_user.id),
    )