# - *- coding: utf- 8 - *-
import asyncio
from typing import Union

from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message
from tgbot.database.db_category import Categoryx
from aiogram.types import ReplyKeyboardRemove

from tgbot.data.config import BOT_VERSION, get_desc
from tgbot.database.db_purchases import Purchasesx
from tgbot.database.db_settings import Settingsx
from tgbot.database.db_users import Clientx
from tgbot.keyboards.inline_admin_page import (
    admin_position_edit_category_swipe_fp,
    admin_position_edit_swipe_fp,
    client_position_edit_swipe_fp,
    position_add_swipe_fp,
    position_edit_category_swipe_fp,
    position_edit_swipe_fp,
    user_position_edit_category_swipe_fp,
    user_position_edit_swipe_fp,
)
from tgbot.keyboards.inline_admin_prod import (
    category_edit_open_finl,
    knowledge_base,
    position_edit_cancel_finl,
    privacy_policy,
    users_admire,
)
from tgbot.keyboards.inline_user import user_support_finl
from tgbot.keyboards.inline_user_page import *
from tgbot.keyboards.reply_main import (
    client_functions_codexk,
    items_frep_client,
    menu_help_clients,
    menu_help_users,
    menu_second_start,
    menu_second_start_clients,
    order_category,
    user_functions_codexk,
)
from tgbot.utils.const_functions import (
    clear_html,
    ded,
    del_message,
    convert_date,
    get_unix,
    is_number,
    to_number,
)
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import (
    upload_photo,
    upload_text,
    insert_tags,
    get_items_available,
)
from tgbot.utils.text_functions import (
    category_open_admin,
    open_profile_client,
    open_profile_user,
    position_open_admin,
    position_open_not_admin_user,
)

router = Router(name=__name__)


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤
@router.message(F.text == "üßëüèª‚Äçüíª –ó–∞–∫–∞–∑—ã")
async def user_shop(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>üîé –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
            reply_markup=prod_item_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>üîé –£–≤—ã, –∑–∞–∫–∞–∑—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_add_swipe:"))
async def prod_position_add_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚ûï</b>",
        reply_markup=position_add_swipe_fp(remover),
    )


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.state import StateFilter


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
def cancel_order_button():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                    callback_data="cancel_create_order",
                )
            ]
        ]
    )


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_add_open:"))
async def prod_position_add_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]

    await state.update_data(here_category_id=category_id)
    await state.set_state("here_position_name")

    await call.message.edit_text(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</b>",
        reply_markup=cancel_order_button(),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.message(F.text, StateFilter("here_position_name"))
async def prod_position_add_name_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    if len(message.text) > 50:
        return await message.answer(
            "<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=cancel_order_button(),
        )

    await state.update_data(here_position_name=clear_html(message.text))
    await state.set_state("here_position_price")

    await message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞</b>",
        reply_markup=cancel_order_button(),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@router.message(F.text, StateFilter("here_position_price"))
async def prod_position_add_price_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    if not is_number(message.text):
        return await message.answer(
            "<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=cancel_order_button(),
        )

    if to_number(message.text) > 10_000_000 or to_number(message.text) < 0:
        return await message.answer(
            "<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0‚ÇΩ –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000‚ÇΩ.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=cancel_order_button(),
        )

    user_id = message.from_user.id
    get_user = Clientx.get(client_id=user_id)

    if to_number(message.text) == None:
        return await message.answer(
            "<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –º–µ–Ω—å—à–µ —á–µ–º –µ—Å—Ç—å —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=cancel_order_button(),
        )

    if to_number(message.text) > get_user.client_balance:
        return await message.answer(
            "<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –º–µ–Ω—å—à–µ —á–µ–º –µ—Å—Ç—å —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=cancel_order_button(),
        )

    await state.update_data(here_position_price=to_number(message.text))
    await state.set_state("here_position_desc")

    await message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</b>\n"
        "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@router.message(F.text, StateFilter("here_position_desc"))
async def prod_position_add_desc_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    if len(message.text) > 400:
        return await message.answer(
            "<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 400 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            reply_markup=cancel_order_button(),
        )

    try:
        if message.text != "0":
            await (await message.answer(message.text)).delete()

            position_desc = message.text
        else:
            position_desc = "None"
    except:
        return await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            reply_markup=cancel_order_button(),
        )

    await state.update_data(here_position_desc=position_desc)
    await state.set_state("here_position_time")

    await message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (–≤ —á–∞—Å–∞—Ö)</b>\n",
        reply_markup=cancel_order_button(),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—Ä–æ–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@router.message(F.text, StateFilter("here_position_time"))
async def prod_position_add_time_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    if not is_number(message.text):
        return await message.answer(
            "<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è",
        )

    if to_number(message.text) > 10_000 or to_number(message.text) < 0:
        return await message.answer(
            "<b>‚ùå –°—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 10 000.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è",
        )

    await state.update_data(here_position_time=to_number(message.text))

    state_data = await state.get_data()

    category_id = state_data["here_category_id"]
    position_name = clear_html(state_data["here_position_name"])
    position_price = to_number(state_data["here_position_price"])
    position_desc = state_data["here_position_desc"]
    position_time = to_number(state_data["here_position_time"])
    position_id = message.from_user.id
    worker_id = 0
    position_status = 0

    await state.clear()

    Positionx.add(
        category_id,
        position_id,
        position_name,
        position_price,
        position_desc,
        position_time,
        worker_id,
        position_status,
    )
    get_position = Positionx.get(position_name=position_name)
    position_unix = get_position.position_unix
    
    await position_open_admin(bot, message.from_user.id, position_id, position_unix)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
@router.callback_query(F.data == "cancel_create_order")
async def cancel_create_order(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await call.message.edit_text("<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>", reply_markup=None)

    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    await menu_second_start_clients(call.message.chat.id)


################################################################################
############################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ##############################
# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_category_swipe:"))
async def prod_position_edit_category_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
        reply_markup=position_edit_category_swipe_fp(remover),
    )

# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("admin_position_edit_category_swipe:"))
async def prod_position_edit_category_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ </b>",
        reply_markup=position_edit_category_swipe_fp(remover),
    )

# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("user_position_edit_category_swipe:"))
async def prod_position_edit_category_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ </b>",
        reply_markup=user_position_edit_category_swipe_fp(remover),
    )

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@router.callback_query(F.data.startswith("position_edit_category_open:"))
async def prod_position_edit_category_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]

    get_category = Categoryx.get(category_id=category_id)
    get_positions = Positionx.gets(category_id=category_id)

    if len(get_positions) >= 1:
        await call.message.edit_text(
            "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
            reply_markup=position_edit_swipe_fp(0, category_id, call),
        )
    else:
        await call.answer(
            f"üìÅ –ó–∞–∫–∞–∑—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category.category_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        )

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@router.callback_query(F.data.startswith("user_position_edit_category_open:"))
async def prod_position_edit_category_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]

    get_category = Categoryx.get(category_id=category_id)
    get_positions = Positionx.gets(category_id=category_id)

    if len(get_positions) >= 1:
        await call.message.edit_text(
            "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
            reply_markup=user_position_edit_swipe_fp(0, category_id, call),
        )
    else:
        await call.answer(
            f"üìÅ –ó–∞–∫–∞–∑—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category.category_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        )

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@router.callback_query(F.data.startswith("admin_position_edit_category_open:"))
async def prod_position_edit_category_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]

    get_category = Categoryx.get(category_id=category_id)
    get_positions = Positionx.gets(category_id=category_id)

    if len(get_positions) >= 1:
        await call.message.edit_text(
            "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
            reply_markup=admin_position_edit_swipe_fp(0, category_id, call),
        )
    else:
        await call.answer(
            f"üìÅ –ó–∞–∫–∞–∑—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category.category_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        )



@router.message(F.text == "üó£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
async def prod_removes(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b>\n",
        reply_markup=users_admire(),
    )


@router.message(F.text == "üë§ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
async def prod_removes(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b> –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n",
        reply_markup=privacy_policy(),
    )


@router.message(F.text == "üìö –ü–æ–º–æ—â—å")
async def prod_removes(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b> –ü–æ–º–æ—â—å </b>\n",
        reply_markup=knowledge_base(),
    )


'''# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üí° –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def user_profile(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await message.answer(
        "<b>üìÅ –ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–µ –¥–∞–ª—å—à–µ?</b>",
        reply_markup=order_category(),
    )

@router.message(F.text == "üìÅ –í—Å–µ –∑–∞–∫–∞–∑—ã")
async def user_all_orders(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_positions = Positionx.gets(position_id=message.from_user.id)
    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            """
            <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>
            """,
            reply_markup=position_edit_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π</b>")


@router.message(F.text == "üë§ –í —Ä–∞–±–æ—Ç–µ")
async def user_profile(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0
    get_positions = Positionx.get_by_id_and_status(message.from_user.id, position_status=0)
    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            """
            <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>
            """,
            reply_markup=position_edit_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π</b>")




@router.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
async def user_profile(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()
    get_positions = Positionx.get_by_id_and_status(message.from_user.id, position_status=1)

    if len(get_categories) >= 1:
        await message.answer(
            """
            <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>
            """,
            reply_markup=position_edit_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π</b>")'''

#! –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤
@router.message(F.text == "üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")
async def prod_position_edit(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            """
            <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>
            """,
            reply_markup=admin_position_edit_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π</b>")

#? –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤
@router.message(F.text == "ü™Ñ –ú–æ–∏ –ó–∞–∫–∞–∑—ã")
async def prod_position_edit(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    get_positions = Positionx.gets(worker_id=user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –µ—Å—Ç—å
    if len(get_positions) > 0:
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ (remover = 0)
        await message.answer(
            "<b>üìÅ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>",
            reply_markup=user_position_edit_swipe_fp(message, None, 0)
        )
    else:
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
        await message.answer("<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤
@router.message(F.text == "üí° –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def prod_position_edit(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    get_positions = Positionx.gets(position_id=user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –µ—Å—Ç—å
    if len(get_positions) > 0:
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ (remover = 0)
        await message.answer(
            "<b>üìÅ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>",
            reply_markup=client_position_edit_swipe_fp(0, None, message)
        )
    else:
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
        await message.answer("<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.</b>")


# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_swipe:"))
async def prod_position_edit_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
        reply_markup=position_edit_swipe_fp(remover, category_id, call),
    )

# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("client_position_edit_open:"))
async def prod_position_edit_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[2]

    remover = int(call.data.split(":")[3])
    position_unix = call.data.split(":")[1]

    await state.clear()

    await del_message(call.message)
    await position_open_admin(bot, call.from_user.id, position_id, position_unix)

# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("position_edit_open:"))
async def prod_position_edit_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[2]
    category_id = call.data.split(":")[3]
    remover = int(call.data.split(":")[4])
    position_unix = call.data.split(":")[1]

    await state.clear()

    await del_message(call.message)
    await position_open_admin(bot, call.from_user.id, position_id, position_unix)

    


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("user_position_edit_open:"))
async def prod_position_edit_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    data = call.data.split(":")
    position_id = int(data[1])  # ID –ø–æ–∑–∏—Ü–∏–∏
    position_unix = int(data[2])  # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    remover = int(data[4])      # –ü–∞—Ä–∞–º–µ—Ç—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await del_message(call.message)

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    await position_open_not_admin_user(bot, call.from_user.id, position_id, position_unix)


############################ –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ############################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_name:"))
async def prod_position_edit_name(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_position_id=position_id)
    await state.update_data(here_category_id=category_id)
    await state.update_data(here_remover=remover)
    await state.set_state("here_position_edit_name")

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</b>",
        reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(F.text, StateFilter("here_position_edit_name"))
async def prod_position_edit_name_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    state_data = await state.get_data()

    position_id = state_data["here_position_id"]
    category_id = state_data["here_category_id"]
    remover = state_data["here_remover"]

    if len(message.text) > 50:
        return await message.answer(
            "<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    await state.clear()
    get_position = Positionx.get(position_id=position_id)
    position_unix = get_position.position_unix
    Positionx.update(position_id, position_name=clear_html(message.text))
    await position_open_admin(bot, message.from_user.id, position_id, position_unix)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_price:"))
async def prod_position_edit_price(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_position_id=position_id)
    await state.update_data(here_category_id=category_id)
    await state.update_data(here_remover=remover)
    await state.set_state("here_position_edit_price")

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞</b>",
        reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(F.text, StateFilter("here_position_edit_price"))
async def prod_position_edit_price_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    state_data = await state.get_data()

    position_id = state_data["here_position_id"]
    category_id = state_data["here_category_id"]
    remover = state_data["here_remover"]

    if not is_number(message.text):
        await message.answer(
            "<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    if to_number(message.text) > 10_000_000 or to_number(message.text) < 0:
        await message.answer(
            "<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0‚ÇΩ –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000‚ÇΩ.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    await state.clear()
    get_position = Positionx.get(position_id=position_id)
    position_unix = get_position.position_unix
    Positionx.update(position_id, position_price=to_number(message.text))
    await position_open_admin(bot, message.from_user.id, position_id, position_unix)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_desc:"))
async def prod_position_edit_desc(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_position_id=position_id)
    await state.update_data(here_category_id=category_id)
    await state.update_data(here_remover=remover)
    await state.set_state("here_position_edit_desc")

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</b>\n"
        "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(F.text, StateFilter("here_position_edit_desc"))
async def prod_position_edit_desc_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    state_data = await state.get_data()

    category_id = state_data["here_category_id"]
    position_id = state_data["here_position_id"]
    remover = state_data["here_remover"]

    if len(message.text) > 400:
        return await message.answer(
            "<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 400 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞\n"
            "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    try:
        if message.text != "0":
            await (await message.answer(message.text)).delete()

            position_desc = message.text
        else:
            position_desc = "None"
    except:
        return await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞\n"
            "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    await state.clear()
    get_position = Positionx.get(position_id=position_id)
    position_unix = get_position.position_unix
    Positionx.update(position_id, position_desc=position_desc)
    await position_open_admin(bot, message.from_user.id, position_id, position_unix)

@router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
async def admin_products(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()
    await message.answer(
        "<b>üßëüèª‚Äçüíª –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤</b>",
        reply_markup=items_frep_client(),
    )


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
@router.message(F.text == "üìÅ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def prod_position_add(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ </b>",
            reply_markup=position_add_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>")


################################################################################
############################### –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í #############################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@router.message(F.text, StateFilter("here_category_name"))
async def prod_category_add_name_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    if len(message.text) > 50:
        return await message.answer(
            "<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞",
        )

    await state.clear()

    category_id = get_unix()
    Categoryx.add(category_id, clear_html(message.text))

    await category_open_admin(bot, message.from_user.id, category_id, 0)


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–¥–º–∏–Ω–æ–º
async def category_open_admin(
    bot: Bot, user_id: int, category_id: Union[str, int], remover: int
):
    get_category = Categoryx.get(category_id=category_id)
    get_positions = Positionx.gets(category_id=category_id)

    send_text = ded(
        f"""
        <b>üóÉÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{get_category.category_name}</code>
        ‚ñ™Ô∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <code>{convert_date(get_category.category_unix)}</code>
    """
    )

    await bot.send_message(
        chat_id=user_id,
        text=send_text,
        reply_markup=category_edit_open_finl(category_id, remover),
    )


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(F.text == "üñç –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def prod_position_edit(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>üñç –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è </b>",
            reply_markup=position_edit_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def user_profile(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await open_profile_user(bot, message.from_user.id)


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def user_profile(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await open_profile_client(bot, message.from_user.id)


@router.message(F.text.in_(("üìç –ü–æ–º–æ—â—å")))
async def client_help(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await message.answer(
        "<b>‚òéÔ∏è –ù–µ –Ω–∞—à–ª–∏, —á—Ç–æ –∏—Å–∫–∞–ª–∏? –ú—ã –ø–æ–º–æ–∂–µ–º! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ FAQ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?</b>",
        reply_markup=menu_help_clients(message.from_user.id),
    )


@router.message(F.text.in_(("‚ûï –ü–æ–º–æ—â—å")))
async def user_help(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await message.answer(
        "<b>‚òéÔ∏è –ù–µ –Ω–∞—à–ª–∏, —á—Ç–æ –∏—Å–∫–∞–ª–∏? –ú—ã –ø–æ–º–æ–∂–µ–º! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ FAQ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?</b>",
        reply_markup=menu_help_users(message.from_user.id),
    )


@router.message(F.text.in_(("üîô –ù–∞–∑–∞–¥")))
async def user_help(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await message.answer(
        "<b>–ú—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>",
        reply_markup=menu_second_start_clients(message.from_user.id),
    )


@router.message(F.text.in_(("‚óÄÔ∏è –ù–∞–∑–∞–¥")))
async def user_help(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await message.answer(
        "<b>–ú—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>",
        reply_markup=menu_second_start(message.from_user.id),
    )


@router.message(F.text.in_(("üìñ –ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")))
async def user_help(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await message.answer(
        "<b>–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>",
        reply_markup=client_functions_codexk(message.from_user.id),
    )


@router.message(F.text.in_(("üìó –ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")))
async def user_help(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await message.answer(
        "<b>–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>",
        reply_markup=user_functions_codexk(message.from_user.id),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ FAQ
@router.message(F.text.in_(("‚ùì FAQ", "/faq")))
async def user_faq(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_settings = Settingsx.get()
    send_message = get_settings.misc_faq

    if send_message == "None":
        send_message = ded(
            f"""
            ‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            {get_desc()}
        """
        )

    await message.answer(
        insert_tags(message.from_user.id, send_message),
        disable_web_page_preview=True,
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@router.message(F.text.in_(("üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "/support")))
async def user_support(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_settings = Settingsx.get()

    if get_settings.misc_support == "None":
        return await message.answer(
            ded(
                f"""
                üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                {get_desc()}
            """
            ),
            disable_web_page_preview=True,
        )

    await message.answer(
        "<b>‚òéÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>",
        reply_markup=user_support_finl(get_settings.misc_support),
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞
@router.message(Command(commands=["version"]))
async def admin_version(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(f"<b>‚ùáÔ∏è –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: <code>{BOT_VERSION}</code></b>")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
@router.message(Command(commands=["dj_desc"]))
async def admin_desc(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(get_desc(), disable_web_page_preview=True)


################################################################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@router.callback_query(F.data == "user_profile")
async def user_profile_return(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()

    await del_message(call.message)
    await open_profile_user(bot, call.from_user.id)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@router.callback_query(F.data == "user_purchases")
async def user_purchases(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_purchases = Purchasesx.gets(user_id=call.from_user.id)
    get_purchases = get_purchases[-5:]

    if len(get_purchases) >= 1:
        await call.answer("‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤")
        await del_message(call.message)

        for purchase in get_purchases:
            link_items = await upload_text(arSession, purchase.purchase_data)

            await call.message.answer(
                ded(
                    f"""
                    <b>üßæ –ß–µ–∫: <code>#{purchase.purchase_receipt}</code></b>
                    ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{purchase.purchase_position_name} | {purchase.purchase_price}‚ÇΩ</code>
                    ‚ñ™Ô∏è –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{convert_date(purchase.purchase_unix)}</code>
                    ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
                """
                )
            )

            await asyncio.sleep(0.2)

        await open_profile_user(bot, call.from_user.id)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", True)


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ª–∏—á–∏—è –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data.startswith("user_available_swipe:"))
async def user_available_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    remover = int(call.data.split(":")[1])

    items_available = get_items_available()

    if remover >= len(items_available):
        remover = len(items_available) - 1
    if remover < 0:
        remover = 0

    await call.message.edit_text(
        items_available[remover],
        reply_markup=prod_available_swipe_fp(remover, len(items_available)),
    )
